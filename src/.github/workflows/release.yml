name: Build and Release

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: syosetu
            asset_name: syosetu-linux-x86_64
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: windows-latest
            artifact_name: syosetu.exe
            asset_name: syosetu-windows-x86_64.exe
            target: x86_64-pc-windows-msvc
            suffix: ".exe"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip debug symbols (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        if-no-files-found: error

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Prepare release assets
      run: |
        ls -la
        mkdir -p release-assets
        
        # 复制并重命名所有平台的二进制文件
        cp syosetu-linux-x86_64/syosetu release-assets/syosetu-linux-x86_64
        chmod +x release-assets/syosetu-linux-x86_64
        
        cp syosetu-windows-x86_64.exe/syosetu.exe release-assets/syosetu-windows-x86_64.exe
        
        ls -la release-assets/

    - name: Get version
      id: get_version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(date +'%Y%m%d-%H%M%S')-$(git rev-parse --short HEAD)
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Create or update release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## Release ${{ steps.get_version.outputs.VERSION }}
          
          ### 下载链接


          #### Linux
          - [Linux x86_64](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/syosetu-linux-x86_64)

          #### Windows
          - [Windows x86_64](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/syosetu-windows-x86_64.exe)
          
          ### 功能特性
          - 上传小说到syosetu平台
          
        files: release-assets/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}